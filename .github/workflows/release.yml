name: Release

on:
  schedule:
    - cron: "0 0 * * *"

  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Set to "release" for a beta release.'
        required: false
        default: "alpha"
      signExe:
        description: 'Set to "true" to generate and sign .exe on Windows.'
        required: false
        default: "false"

env:
  GITHUB_USERNAME: "nuxeodrive"
  GITHUB_EMAILID: "drive@hyland.com"

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check_changes.outputs.changes }}
      changes_list: ${{ steps.list_changes.outputs.changes_list }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch all history for all branches and tags
        run: git fetch --unshallow --tags --prune --recurse-submodules=on-demand --quiet

      - name: Get the latest commit SHA and date on main branch
        id: latest_commit
        run: |
          latest_sha=$(git rev-parse origin/main)
          latest_date=$(git show -s --format=%ci $latest_sha | cut -d' ' -f1)
          echo "latest_sha=$latest_sha" >> $GITHUB_ENV
          echo "latest_date=$latest_date" >> $GITHUB_ENV
          echo "Latest SHA: $latest_sha"
          echo "Latest Date: $latest_date"
          echo "::set-output name=latest_sha::$latest_sha"
          echo "::set-output name=latest_date::$latest_date"

      - name: Get the last successful commit SHA and date
        id: last_successful_commit
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          last_successful_commit=$(gh run list --branch main --workflow Release --json headSha -q '.[0].headSha')
          last_successful_date=$(git show -s --format=%ci $last_successful_commit | cut -d' ' -f1)
          # Force the date to be different for testing
          last_successful_date="2024-06-25"
          echo "last_successful_sha=$last_successful_commit" >> $GITHUB_ENV
          echo "last_successful_date=$last_successful_date" >> $GITHUB_ENV
          echo "Last Successful SHA: $last_successful_commit"
          echo "Last Successful Date: $last_successful_date"
          echo "::set-output name=last_successful_sha::$last_successful_commit"
          echo "::set-output name=last_successful_date::$last_successful_date"

      - name: Check for changes
        id: check_changes
        run: |
          latest_date=${{ steps.latest_commit.outputs.latest_date }}
          last_successful_date=${{ steps.last_successful_commit.outputs.last_successful_date }}
          if [ "$latest_date" == "$last_successful_date" ]; then
            echo "No changes in main branch since last successful run."
            echo "::set-output name=changes::false"
          else
            echo "Changes detected in main branch."
            echo "::set-output name=changes::true"
          fi
        env:
          latest_date: ${{ steps.latest_commit.outputs.latest_date }}
          last_successful_date: ${{ steps.last_successful_commit.outputs.last_successful_date }}

      - name: List changes
        id: list_changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          last_successful_sha=${{ steps.last_successful_commit.outputs.last_successful_sha }}
          latest_sha=${{ steps.latest_commit.outputs.latest_sha }}
          echo "Last Successful SHA: $last_successful_sha"
          echo "Latest SHA: $latest_sha"
          changes=$(git log --oneline $last_successful_sha..$latest_sha)
          echo "Changes list:"
          echo "$changes"
          echo "::set-output name=changes_list::$changes"

  release:
    runs-on: ${{ matrix.os }}
    needs: [check_changes]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, 'macos-latest']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Proceed if there are changes
        if: needs.check_changes.outputs.has_changes == 'true'
        run: |
          echo "Proceeding with the release job."
          echo "Changes since last successful run:"
          echo "${{ needs.check_changes.outputs.changes_list }}"
